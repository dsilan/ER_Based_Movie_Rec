# -*- coding: utf-8 -*-
"""MovieRecommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PU6qk1N3tze16qdFhqdsbVS28iCjpbad
"""

#Necessary libraries
import numpy as np
import pandas as pd

movies = pd.read_csv('imdb-movies-data.csv')


""" even if number of vote is poor it may cause that movie seem like it's successfull.**
So ratings and number of votes are both important for recommendation.
"""


#genres = np.array(['Adventure','Sci-Fi','Animation','Comedy','Mystery','Thriller','Drama','Romance','Horror'])

C = movies['averagerating'].mean()

# Calculate the minimum number of votes required to be in the chart, m
m = movies['numvotes'].quantile(0.90)

# Filter out all qualified movies into a new DataFrame
q_movies = movies.copy().loc[movies['numvotes'] >= m]

# Function that computes the weighted rating of each movie
def weighted_rating(data, m=m, C=C):
    v = data['numvotes']
    R = data['averagerating']
    # Calculation based on the IMDB formula
    return (v/(v+m) * R) + (m/(m+v) * C)

# Define a new feature 'score' and calculate its value with `weighted_rating()`
q_movies['score'] = q_movies.apply(weighted_rating, axis=1)

#sort movies based on score calculated above
q_movies = q_movies.sort_values('score', ascending=False)


"""Score işlemini tamamladıktan sonra bir sonraki aşama olarak gerçekleştirdiğimiz anket sonuçlarındaki kişilerin farklı ruh halindeyken yapacağı film tercihi sonuçlarını inceledik.
Yüksek yüzde ile seçilen film türlerini tavsiye oluştururken göz önünde bulunduracağız.

Nötr, üzgün, mutlu ve sinirli için dört ayrı dictionary yapısı oluşturup **"genre":yüzde** şeklinde doldurma işlemini gerçekleştirdik. Grafiklere göre %20'den fazla yüzdesi olan genre'ları dikkate aldık.

Ankette birden fazla seçenek seçme şansı tanıdığımız için yüzdelerin toplamı 100 olacak şekilde oran orantı ile yeniden yazdık.
"""

#'Adventure' : 0.37,'Sci-Fi' : 0.51,'Comedy':0.29,'Mystery':0.29,'Thriller':0.29
notr_mood_genres = {
    'Adventure' : 0.21,
    'Sci-Fi' : 0.28,
    'Comedy':0.17,
    'Mystery':0.17,
    'Thriller':0.17
}

sad_mood_genres = {
    'Comedy':0.3,
    'Drama':0.4,
    'Romance':0.3
}

#'Adventure' :0.41,'Sci-Fi' :0.44,'Animation':0.23,'Comedy':0.47,'Mystery':0.23,'Thriller':0.23,'Romance':0.34
happy_mood_genres = {
    'Adventure' :0.1744,
     'Sci-Fi' :0.1872,
     'Animation':0.0979,
     'Comedy':0.20,
     'Mystery':0.0979,
     'Thriller':0.0979,
     'Romance':0.1447
}

angry_mood_genres = {
    'Sci-Fi' : 0.20,
    'Comedy':0.32,
    'Mystery':0.24,
    'Thriller':0.24,
}

mood = "sad" #this variable will be fill from emotion rec. system


"""Genre sütununda seçilen türü içeren ve hesaplanan score değeri 6.5'a eşit veya daha yüksek olan filmlerden sample seçecek."""

def recommend_movie(rec_genre):
  print(q_movies.loc[(q_movies['genres'].str.contains('Drama')) & (q_movies['score'] >= 6.5) ].sample())

def rec_for_sad():
  rec_genre = np.random.choice(np.array(list(sad_mood_genres.keys())), 1, p=np.array(list(sad_mood_genres.values())))[0]
  recommend_movie(rec_genre)

def rec_for_happy():
  rec_genre = np.random.choice(np.array(list(happy_mood_genres.keys())), 1, p=np.array(list(happy_mood_genres.values())))[0]
  recommend_movie(rec_genre)

def rec_for_angry():
  rec_genre = np.random.choice(np.array(list(angry_mood_genres.keys())), 1, p=np.array(list(angry_mood_genres.values())))[0]
  recommend_movie(rec_genre)

def rec_for_notr():
  rec_genre = np.random.choice(np.array(list(notr_mood_genres.keys())), 1, p=np.array(list(notr_mood_genres.values())))[0]
  recommend_movie(rec_genre)

if mood == "Sad":
  rec_for_sad()
elif mood == "Happy":
  rec_for_happy()
elif mood == "Angry":
  rec_for_angry()
else: #neutral
  rec_for_notr()